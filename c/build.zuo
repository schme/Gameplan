#lang zuo

(provide-targets targets-at)


(define (targets-at at-dir [vars (hash)])
  (define gameplan (at-dir (.exe "gameplan")))

  (define gameplan.c (at-source "gameplan.c"))
  (define gameplan.h (at-source "gameplan.h"))
  (define gameplan.o (at-dir (.c->.o "gameplan")))
  (define Gdict.c (at-source "Gdict.c"))
  (define Gdict.h (at-source "Gdict.h"))
  (define Gdict.o (at-dir (.c->.o "Gdict")))
  (define Gmem.c (at-source "Gmem.c"))
  (define Gmem.h (at-source "Gmem.h"))
  (define Gmem.o (at-dir (.c->.o "Gmem")))
  (define Gstring.c (at-source "Gstring.c"))
  (define Gstring.h (at-source "Gstring.h"))
  (define Gstring.o (at-dir (.c->.o "Gstring")))

  (define config-in
	(hash 'prefix "install"
		  'CC "clang"
		  'CPPFLAGS ""
		  'CFLAGS "-Wall -Wextra -pedantic -g -O0 -std=c17 -Wno-unused-function"
		  'LDFLAGS ""
		  'LIBS ""))
  (define config (foldl (lambda (key config)
						  (hash-set config key (hash-ref vars key)))
						config-in
						(hash-keys vars)))
  (define install-prefix (hash-ref config 'prefix))

  (make-targets
	`([:target ,gameplan (,gameplan.o ,Gdict.o ,Gmem.o ,Gstring.o)
			   ,(lambda (dest token)
				  (c-link dest (list gameplan.o Gdict.o Gmem.o Gstring.o) config))]
	  [:target ,gameplan.o (,gameplan.c ,gameplan.h)
			   ,(lambda (dest token)
          (c-compile dest gameplan.c config))]
	  [:target ,Gdict.o (,Gdict.c ,Gdict.h)
			   ,(lambda (dest token)
				  (c-compile dest Gdict.c config))]
	  [:target ,Gmem.o (,Gmem.c ,Gmem.h)
			   ,(lambda (dest token)
				  (c-compile dest Gmem.c config))]
	  [:target ,Gstring.o (,Gstring.c ,Gstring.h)
			   ,(lambda (dest token)
				  (c-compile dest Gstring.c config))]
	  [:target clean ()
			   ,(lambda (token)
				  (for-each rm* (list gameplan.o Gdict.o Gmem.o Gstring.o gameplan)))])))
